"""
Service pour l'int√©gration avec l'API OpenAI
"""
import os
import openai
from django.conf import settings
import json
import logging

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self):
        self.client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
    
    def generate_questions_from_document(self, file_path, document_title, question_count=5, difficulty='medium', education_level=''):
        """
        G√©n√®re des questions QCM √† partir d'un fichier directement transmis √† l'IA
        """
        try:
            import base64
            
            logger.info(f"üöÄ D√©but de g√©n√©ration IA pour le document: {document_title}")
            logger.info(f"üìÅ Chemin du fichier: {file_path}")
            logger.info(f"üìä Param√®tres: {question_count} questions, difficult√© {difficulty}, niveau {education_level}")
            
            # Construire le contexte √©ducatif d√©taill√©
            education_context = self._build_education_context(education_level)
            
            # Lire le fichier et l'encoder en base64
            logger.info(f"üìñ Lecture du fichier: {file_path}")
            with open(file_path, 'rb') as f:
                file_data = f.read()
                file_base64 = base64.b64encode(file_data).decode('utf-8')
            
            logger.info(f"üìè Taille du fichier: {len(file_data)} bytes")
            logger.info(f"üìè Taille base64: {len(file_base64)} caract√®res")
            
            # D√©terminer le type MIME du fichier
            file_extension = os.path.splitext(file_path)[1].lower()
            mime_types = {
                '.pdf': 'application/pdf',
                '.jpg': 'image/jpeg',
                '.jpeg': 'image/jpeg',
                '.png': 'image/png',
                '.gif': 'image/gif',
                '.webp': 'image/webp',
                '.txt': 'text/plain',
                '.md': 'text/markdown',
                '.json': 'application/json',
                '.csv': 'text/csv',
                '.xml': 'application/xml',
                '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            }
            
            mime_type = mime_types.get(file_extension, 'application/octet-stream')
            logger.info(f"üè∑Ô∏è Extension: {file_extension}, Type MIME: {mime_type}")
            
            # Prompt pour g√©n√©rer des questions QCM
            prompt = f"""
Tu es un expert en p√©dagogie et en didactique. G√©n√®re {question_count} questions √† choix multiples (QCM) de haute qualit√© bas√©es sur le document suivant.

Titre du document: {document_title}

{education_context}

Instructions d√©taill√©es:
- G√©n√®re exactement {question_count} questions QCM
- Niveau de difficult√© demand√©: {difficulty}
- Chaque question doit avoir 4 options (A, B, C, D)
- Une seule r√©ponse correcte par question
- Les questions doivent tester diff√©rents niveaux de compr√©hension :
  * M√©morisation (faits, d√©finitions)
  * Compr√©hension (explications, relations)
  * Application (utilisation des concepts)
  * Analyse (comparaison, distinction)

Qualit√© des questions:
- Utilise un vocabulaire adapt√© au niveau d'√©ducation
- Les distracteurs (mauvaises r√©ponses) doivent √™tre plausibles mais incorrects
- √âvite les questions trop √©videntes ou pi√©geuses
- Varie les types de questions (d√©finition, application, calcul, etc.)
- Assure-toi que la r√©ponse correcte est clairement la meilleure

Format de r√©ponse: JSON avec la structure suivante:
{{
    "questions": [
        {{
            "question_text": "Texte de la question claire et pr√©cise",
            "difficulty": "{difficulty}",
            "answers": [
                {{"text": "Option A - r√©ponse plausible", "is_correct": true}},
                {{"text": "Option B - distracteur plausible", "is_correct": false}},
                {{"text": "Option C - distracteur plausible", "is_correct": false}},
                {{"text": "Option D - distracteur plausible", "is_correct": false}}
            ]
        }}
    ]
}}

R√©ponds UNIQUEMENT avec le JSON, sans texte suppl√©mentaire.
"""

            # Uploader le fichier d'abord
            logger.info(f"üì§ Upload du fichier vers OpenAI...")
            uploaded_file = self.client.files.create(
                file=open(file_path, 'rb'),
                purpose='assistants'
            )
            logger.info(f"‚úÖ Fichier upload√© avec l'ID: {uploaded_file.id}")
            
            # Construire le message avec le fichier
            message_content = [
                {"type": "text", "text": prompt}
            ]
            
            # Ajouter le fichier selon son type
            if file_extension in ['.pdf', '.txt', '.md', '.json', '.csv', '.xml', '.docx', '.pptx', '.xlsx']:
                # Pour les documents, utiliser le type "file"
                logger.info(f"üìÑ Ajout du document de type: {mime_type}")
                message_content.append({
                    "type": "file",
                    "file": {
                        "file_id": uploaded_file.id
                    }
                })
            else:
                # Pour les images, utiliser le type "image_url"
                logger.info(f"üñºÔ∏è Ajout de l'image de type: {mime_type}")
                message_content.append({
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:{mime_type};base64,{file_base64}"
                    }
                })

            logger.info(f"ü§ñ Envoi de la requ√™te √† OpenAI avec le mod√®le gpt-4o-mini")
            logger.info(f"üìù Contenu du message: {len(message_content)} √©l√©ments")
            
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Tu es un expert en p√©dagogie, didactique et √©valuation. Tu g√©n√®res des questions de quiz de haute qualit√©, adapt√©es au niveau d'√©ducation de l'utilisateur. Tu ma√Ætrises les principes de la taxonomie de Bloom et adaptes le vocabulaire et la complexit√© selon le public cible."},
                    {"role": "user", "content": message_content}
                ],
                max_tokens=2500,
                temperature=0.6
            )
            
            logger.info(f"‚úÖ R√©ponse re√ßue d'OpenAI")
            
            # Extraire le contenu de la r√©ponse
            content = response.choices[0].message.content.strip()
            logger.info(f"üìÑ Contenu brut re√ßu: {content[:200]}...")
            
            # Nettoyer le contenu (enlever les markdown si pr√©sent)
            if content.startswith('```json'):
                content = content[7:]
            if content.endswith('```'):
                content = content[:-3]
            
            logger.info(f"üßπ Contenu nettoy√©: {content[:200]}...")
            
            # Parser le JSON
            questions_data = json.loads(content)
            logger.info(f"‚úÖ JSON pars√© avec succ√®s, {len(questions_data['questions'])} questions g√©n√©r√©es")
            
            # Nettoyer le fichier upload√©
            try:
                self.client.files.delete(uploaded_file.id)
                logger.info(f"üóëÔ∏è Fichier temporaire supprim√©: {uploaded_file.id}")
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è Impossible de supprimer le fichier temporaire: {cleanup_error}")
            
            return questions_data['questions']
            
        except json.JSONDecodeError as e:
            logger.error(f"Erreur de parsing JSON: {e}")
            logger.error(f"Contenu re√ßu: {content}")
            raise Exception(f"Erreur de parsing JSON de la r√©ponse IA: {e}")
            
        except Exception as e:
            logger.error(f"Erreur OpenAI: {e}")
            # Nettoyer le fichier upload√© en cas d'erreur
            try:
                if 'uploaded_file' in locals():
                    self.client.files.delete(uploaded_file.id)
                    logger.info(f"üóëÔ∏è Fichier temporaire supprim√© apr√®s erreur: {uploaded_file.id}")
            except:
                pass
            raise Exception(f"Erreur lors de la g√©n√©ration des questions par l'IA: {e}")
    
    def _build_education_context(self, education_level):
        """Construit un contexte √©ducatif d√©taill√© bas√© sur le niveau d'√©ducation"""
        if not education_level:
            return "Niveau d'√©ducation: Non sp√©cifi√© - Adapte le contenu √† un niveau g√©n√©ral."
        
        # Mapping des niveaux vers des contextes d√©taill√©s
        education_contexts = {
            # Coll√®ge
            "6√®me": "Niveau: 6√®me (11-12 ans) - Utilise un vocabulaire simple, des concepts concrets, √©vite le jargon technique. Questions bas√©es sur la m√©morisation et la compr√©hension de base.",
            "5√®me": "Niveau: 5√®me (12-13 ans) - Vocabulaire accessible, concepts progressivement plus abstraits. M√©lange m√©morisation et compr√©hension.",
            "4√®me": "Niveau: 4√®me (13-14 ans) - Vocabulaire de niveau coll√®ge, introduction de concepts plus complexes. Questions de compr√©hension et d'application basique.",
            "3√®me": "Niveau: 3√®me (14-15 ans) - Vocabulaire de fin de coll√®ge, concepts abstraits ma√Ætris√©s. Questions d'application et d'analyse simple.",
            
            # Lyc√©e
            "2nde": "Niveau: 2nde (15-16 ans) - Vocabulaire lyc√©en, concepts abstraits. Questions de compr√©hension, application et analyse.",
            "1√®re": "Niveau: 1√®re (16-17 ans) - Vocabulaire sp√©cialis√© selon la mati√®re, concepts avanc√©s. Questions d'analyse et de synth√®se.",
            "Terminale": "Niveau: Terminale (17-18 ans) - Vocabulaire expert, concepts complexes. Questions d'analyse, synth√®se et √©valuation.",
            "Bac Pro": "Niveau: Bac Pro - Vocabulaire professionnel, applications concr√®tes. Questions pratiques et techniques.",
            "Bac Techno": "Niveau: Bac Techno - Vocabulaire technique sp√©cialis√©, applications sectorielles. Questions techniques et appliqu√©es.",
            "CAP": "Niveau: CAP - Vocabulaire professionnel de base, applications pratiques. Questions concr√®tes et op√©rationnelles.",
            
            # Sup√©rieur
            "BTS": "Niveau: BTS - Vocabulaire professionnel avanc√©, applications sectorielles. Questions techniques et professionnelles.",
            "DUT": "Niveau: DUT - Vocabulaire technique sp√©cialis√©, applications industrielles. Questions techniques et m√©thodologiques.",
            "BUT": "Niveau: BUT - Vocabulaire technique expert, applications professionnelles. Questions techniques avanc√©es et m√©thodologiques.",
            "Licence": "Niveau: Licence - Vocabulaire acad√©mique, concepts th√©oriques. Questions d'analyse, synth√®se et critique.",
            "Licence Pro": "Niveau: Licence Pro - Vocabulaire professionnel expert, applications avanc√©es. Questions techniques et manag√©riales.",
            "Master": "Niveau: Master - Vocabulaire acad√©mique expert, concepts avanc√©s. Questions de recherche, analyse critique et innovation.",
            "Master Pro": "Niveau: Master Pro - Vocabulaire professionnel expert, applications strat√©giques. Questions de management et d'innovation.",
            "Doctorat": "Niveau: Doctorat - Vocabulaire scientifique expert, concepts de pointe. Questions de recherche, innovation et contribution au savoir.",
            "√âcole d'ing√©nieur": "Niveau: √âcole d'ing√©nieur - Vocabulaire technique expert, applications industrielles. Questions techniques, m√©thodologiques et d'innovation.",
            "√âcole de commerce": "Niveau: √âcole de commerce - Vocabulaire business expert, applications strat√©giques. Questions de management, strat√©gie et leadership.",
            "√âcole sp√©cialis√©e": "Niveau: √âcole sp√©cialis√©e - Vocabulaire expert du domaine, applications professionnelles. Questions sp√©cialis√©es et pratiques.",
            "Formation continue": "Niveau: Formation continue - Vocabulaire professionnel adapt√©, applications pratiques. Questions op√©rationnelles et d'am√©lioration.",
            
            # Professionnel
            "En activit√©": "Niveau: Professionnel en activit√© - Vocabulaire professionnel, applications pratiques. Questions op√©rationnelles et d'efficacit√©.",
            "En recherche d'emploi": "Niveau: Professionnel en recherche - Vocabulaire professionnel, applications pratiques. Questions de comp√©tences et d'adaptation.",
            "Retrait√©": "Niveau: Retrait√© - Vocabulaire accessible, applications concr√®tes. Questions de compr√©hension et d'application basique.",
            
            # Autre
            "Autre": "Niveau: Autre - Adapte le contenu √† un niveau g√©n√©ral accessible. Questions de compr√©hension et d'application."
        }
        
        return education_contexts.get(education_level, f"Niveau: {education_level} - Adapte le contenu √† ce niveau sp√©cifique.")
    
    def _get_fallback_questions(self, document_title, question_count, difficulty):
        """
        Questions de secours en cas d'erreur avec l'API
        """
        fallback_questions = [
            {
                "question_text": f"Quel est le sujet principal du document '{document_title}' ?",
                "difficulty": difficulty,
                "answers": [
                    {"text": "Le sujet principal du document", "is_correct": True},
                    {"text": "Un sujet secondaire", "is_correct": False},
                    {"text": "Une information accessoire", "is_correct": False},
                    {"text": "Une conclusion", "is_correct": False}
                ]
            },
            {
                "question_text": f"Le document '{document_title}' contient-il des informations importantes ?",
                "difficulty": difficulty,
                "answers": [
                    {"text": "Oui, des informations importantes", "is_correct": True},
                    {"text": "Non, aucune information", "is_correct": False},
                    {"text": "Seulement des d√©tails", "is_correct": False},
                    {"text": "Des informations obsol√®tes", "is_correct": False}
                ]
            }
        ]
        
        # Retourner le nombre demand√© de questions
        return fallback_questions[:question_count]
